#lang racket

;; V10 CLASS Truth Theorems (compat)

(require racket/contract
         racket/match
         racket/function
         racket/hash
         rackunit
         "core.rkt"
         (file "../src/foundation/v2-axioms.rkt")
         (file "../src/moduli/moduli-system.rkt")
         (file "../src/logic/guarded-negation.rkt")
         (file "../src/algebra/algebraic-structures.rkt")
         "abstract-framework.rkt"
         (file "../src/ports/domain-registry.rkt")
         (file "../src/physics/feynman-path-integral.rkt"))

(provide (all-defined-out))

(define (church-turing-equivalence)
  (define test-term (semiring-element 1.0 B))
  (define lambda-port (get-domain-port 'lambda))
  (define turing-port (get-domain-port 'turing))
  (when (and lambda-port turing-port)
    (define lambda-result (domain-port-eval lambda-port test-term))
    (define turing-result (domain-port-eval turing-port test-term))
    (and (not (equal? lambda-result 'undefined))
         (not (equal? turing-result 'undefined))
         (semiring-element? lambda-result)
         (semiring-element? turing-result))))

(define (eor-health)
  (define test-l (semiring-element (make-abstract-const 0.5 'real) L))
  (define test-r (semiring-element (make-abstract-const 0.7 'real) R))
  (define l-retraction (ν_L (ι_L test-l)))
  (define r-retraction (ν_R (ι_R test-r)))
  (define l-cross (ν_L (ι_R test-r)))
  (define r-cross (ν_R (ι_L test-l)))
  (and (abstract-semiring-equal? l-retraction test-l)
       (abstract-semiring-equal? r-retraction test-r)
       (abstract-expr-equal? (semiring-element-value l-cross) (make-abstract-const 0 'integer))
       (abstract-expr-equal? (semiring-element-value r-cross) (make-abstract-const 0 'integer))))

(define (logic-zeta-equivalence)
  (define critical-value 0.5)
  (define test-term (semiring-element (make-abstract-const critical-value 'real) B))
  (define and-result (gn-and (semiring-element (make-abstract-const critical-value 'real) L) (semiring-element (make-abstract-const critical-value 'real) L)))
  (define or-result (gn-or (semiring-element (make-abstract-const critical-value 'real) L) (semiring-element (make-abstract-const critical-value 'real) L)))
  (define not-result (gn-not (semiring-element (make-abstract-const critical-value 'real) L)))
  (and (semiring-element? and-result)
       (semiring-element? or-result)
       (semiring-element? not-result)
       (abstract-eval-bool (abstract-ge? (semiring-element-value and-result) (make-abstract-const 0 'integer)))
       (abstract-eval-bool (abstract-le? (semiring-element-value and-result) (make-abstract-const 1 'integer)))
       (abstract-eval-bool (abstract-ge? (semiring-element-value or-result) (make-abstract-const 0 'integer)))
       (abstract-eval-bool (abstract-le? (semiring-element-value or-result) (make-abstract-const 1 'integer)))
       (abstract-eval-bool (abstract-ge? (semiring-element-value not-result) (make-abstract-const 0 'integer)))
       (abstract-eval-bool (abstract-le? (semiring-element-value not-result) (make-abstract-const 1 'integer)))))

(define (umbral-renormalization)
  (define test-term (semiring-element 2.0 B))
  (define nf-result (normal-form-4mod test-term))
  (define nf-then-delta nf-result)
  (define delta-term ((semiring-ops-add B-ops) test-term (semiring-element -1.0 B)))
  (define delta-then-nf (normal-form-4mod delta-term))
  (and (list? nf-then-delta)
       (list? delta-then-nf)
       (= (length nf-then-delta) 3)
       (= (length delta-then-nf) 3)))

(define (bulk-equals-two-boundaries)
  (define test-term (semiring-element 1.5 B))
  (define left-projection (ι_L (ν_L test-term)))
  (define right-projection (ι_R (ν_R test-term)))
  (define reconstituted ((semiring-ops-add B-ops) left-projection right-projection))
  (define direct-left (ν_L test-term))
  (define reconstituted-left (ν_L reconstituted))
  (define direct-right (ν_R test-term))
  (define reconstituted-right (ν_R reconstituted))
  (and (semiring-element? direct-left)
       (semiring-element? reconstituted-left)
       (semiring-element? direct-right)
       (semiring-element? reconstituted-right)
       (equal? (semiring-element-semiring-type direct-left) L)
       (equal? (semiring-element-semiring-type reconstituted-left) L)
       (equal? (semiring-element-semiring-type direct-right) R)
       (equal? (semiring-element-semiring-type reconstituted-right) R)))

(define (run-truth-theorems)
  (displayln "=== V10 CLASS Truth Theorems (Integration Tests) ===")
  (displayln "Testing Church-Turing equivalence...")
  (check-true (church-turing-equivalence) "Church-Turing equivalence holds")
  (displayln "Testing EOR (Each Object Represented Once)...")
  (check-true (eor-health) "EOR health holds")
  (displayln "Testing Logic-ζ critical-line equivalence...")
  (check-true (logic-zeta-equivalence) "Logic-ζ equivalence holds")
  (displayln "Testing umbral-renormalization...")
  (check-true (umbral-renormalization) "Umbral-renormalization holds")
  (displayln "Testing bulk = two boundaries...")
  (check-true (bulk-equals-two-boundaries) "Bulk = two boundaries holds")
  (displayln "=== All Truth Theorems Passed ===")
  #t)

(displayln "V10 CLASS Truth Theorems (Lux) initialized")
