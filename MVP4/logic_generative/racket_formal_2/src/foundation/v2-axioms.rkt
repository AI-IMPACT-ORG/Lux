#lang racket
;; V2/V10 Axioms and Rigorous Foundation Runner (Lux)
;; Spec mapping: A0–A7, V10-Core as in SPEC_MAP.md

(require racket/function
         rackunit
         (file "../foundations/abstract-core.rkt")
         (file "../algebra/algebraic-structures.rkt")
         (file "../algebra/central-scalars.rkt")
         (file "../algebra/explog-decomposition.rkt")
         (file "../algebra/braided-operators.rkt")
         (file "../algebra/boundary-decomposition.rkt")
         (file "../algebra/auxiliary-transporters.rkt"))

(provide (all-defined-out))

(define (test-centrality s)
  (define elems (list (semiring-element (get-two) B)
                      (semiring-element (get-three) B)
                      (semiring-element (get-five) B)))
  (for/and ([e elems])
    (abstract-semiring-equal? ((semiring-ops-mul B-ops) s e)
                              ((semiring-ops-mul B-ops) e s))))

(define (test-cross-centrality xv yv)
  (define x (semiring-element (make-abstract-const xv 'integer) L))
  (define y (semiring-element (make-abstract-const yv 'integer) R))
  (abstract-semiring-equal? ((semiring-ops-mul B-ops) (ι_L x) (ι_R y))
                            ((semiring-ops-mul B-ops) (ι_R y) (ι_L x))))

(define (test-local-faithfulness xv tv)
  (define x (semiring-element xv L))
  (define t (semiring-element tv B))
  (hash-set! element-origin t 'ι_L)
  (equal? (ν_L ((semiring-ops-mul B-ops) (ι_L x) t))
          ((semiring-ops-mul L-ops) x (ν_L t))))

(define (test-minimal-cross-connector xv yv)
  (define x (semiring-element xv L))
  (define y (semiring-element yv R))
  (define zero-L (semiring-element (get-zero) L))
  (define zero-R (semiring-element (get-zero) R))
  (and (abstract-semiring-equal? (ν_L (ι_R y)) zero-L)
       (abstract-semiring-equal? (ν_R (ι_L x)) zero-R)))

(define (test-NF-B-properties b)
  (define nf (NF-B b))
  (and (list? nf)
       (= (length nf) 3)
       (semiring-element? (list-ref nf 2))
       (eq? (semiring-element-semiring-type (list-ref nf 2)) Core)))

(define (run-v2-rigorous-tests)
  (displayln "=== V2 Rigorous Foundation Tests (Lux) ===")
  (define test-l (semiring-element (get-two) L))
  (define test-r (semiring-element (get-three) R))
  (define test-b (semiring-element (get-four) B))
  (check-true (test-centrality φ))
  (check-true (test-centrality z))
  (check-true (test-centrality z̄))
  (check-true (test-centrality Λ))
  (check-true (test-retraction-left test-l))
  (check-true (test-retraction-right test-r))
  (check-true (test-observer-homomorphism ν_L))
  (check-true (test-observer-homomorphism ν_R))
  (check-true (test-cross-centrality 2 3))
  (check-true (test-local-faithfulness 2 4))
  (check-true (test-minimal-cross-connector 2 3))
  (check-true (test-yang-baxter-relations))
  (check-true (test-commutation-relations))
  (check-true (test-braiding-commutation-observers))
  (check-true (test-braiding-commutation-embeddings))
  (check-true (test-exp-log-isomorphism test-b))
  (check-true (test-header-factoring test-b))
  (check-true (test-projector-idempotence test-b))
  (check-true (test-bulk-equals-boundaries test-b))
  (check-true (test-residual-properties test-b))
  (check-true (test-residual-invisibility-model-specific test-b))
  (check-true (test-bulk-two-boundaries test-b))
  (check-true (test-auxiliary-transporter test-b))
  (check-true (test-monoid-semiring-structure test-b))
  (check-true (test-conjugation-auxiliary-swap test-b))
  (check-true (test-auxiliary-modulated-composition test-b))
  (displayln "=== All V2 Rigorous Tests (Lux) Passed ==="))
