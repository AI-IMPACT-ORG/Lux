$(
  MDE Pyramid with Resolved Metas - Metamath Implementation
  All moduli parameters are explicitly instantiated
  This provides a complete, compilable Metamath library
  
  Generated by metamath-generator.rkt
  $)

$( M3 Layer: Metametamodel Foundation with Resolved Metas $)
$( All moduli parameters are explicitly instantiated $)

$c Symbol $.
$c port pin input output sigma6 tensor wire unit cast $.
$c Arity input-arity output-arity $.
$c PortSort Port Pin Input Output $.
$c EdgeKind Sigma6 Tensor Wire Unit Cast $.
$c TypeGraph ports kinds arity-map src-sorts dst-sorts $.
$c ModuliSpace mkModuliSpace $.
$c AnomalyFunc Anomaly $.
$c nat bool $.
$c get-mu1 get-mu2 get-mu3 get-mu4 $.
$c mu1-positive mu2-positive mu3-positive mu4-positive $.

$v s $.
symbol-is-symbol $f Symbol s $.

$v a $.
arity-is-arity $f Arity a $.

$v p $.
portsort-is-portsort $f PortSort p $.

$v e $.
edgekind-is-edgekind $f EdgeKind e $.

$v tg $.
typegraph-is-typegraph $f TypeGraph tg $.

$v ms $.
modulispace-is-modulispace $f ModuliSpace ms $.

$v af $.
anomalyfunc-is-anomalyfunc $f AnomalyFunc af $.

$( Symbol constructors $)
port-is-symbol $a Symbol port $.
pin-is-symbol $a Symbol pin $.
input-is-symbol $a Symbol input $.
output-is-symbol $a Symbol output $.
sigma6-is-symbol $a Symbol sigma6 $.
tensor-is-symbol $a Symbol tensor $.
wire-is-symbol $a Symbol wire $.
unit-is-symbol $a Symbol unit $.
cast-is-symbol $a Symbol cast $.

$( PortSort constructors $)
port-is-portsort $a PortSort Port $.
pin-is-portsort $a PortSort Pin $.
input-is-portsort $a PortSort Input $.
output-is-portsort $a PortSort Output $.

$( EdgeKind constructors $)
sigma6-is-edgekind $a EdgeKind Sigma6 $.
tensor-is-edgekind $a EdgeKind Tensor $.
wire-is-edgekind $a EdgeKind Wire $.
unit-is-edgekind $a EdgeKind Unit $.
cast-is-edgekind $a EdgeKind Cast $.

$( Concrete moduli instantiation $)
concrete-moduli $a ModuliSpace mkModuliSpace $.

$( AnomalyFunc constructors $)
anomaly-is-anomalyfunc $a AnomalyFunc Anomaly $.

$( Accessor functions for moduli $)
get-mu1-def $a nat get-mu1 $.
get-mu2-def $a nat get-mu2 $.
get-mu3-def $a nat get-mu3 $.
get-mu4-def $a nat get-mu4 $.

$( Moduli constraint proofs $)
mu1-positive-def $a bool mu1-positive $.
mu2-positive-def $a bool mu2-positive $.
mu3-positive-def $a bool mu3-positive $.
mu4-positive-def $a bool mu4-positive $.

