module CLEAN.Core.Rewrite where

open import Agda.Builtin.Nat using (Nat)

open import CLEAN.Core.Signature
open import CLEAN.Core.Diagram
open import CLEAN.Core.Sorts

-- | Rewriting rules carry their boundary so compositions stay type safe.
record Rule (Σ : Signature) : Set₁ where
  constructor mkRule
  field
    {srcLen} : Nat
    {dstLen} : Nat
    boundary : Boundary srcLen dstLen
    lhs      : Diagram Σ (src boundary) (dst boundary)
    rhs      : Diagram Σ (src boundary) (dst boundary)

open Rule public

record RuleFamily (Σ : Signature) : Set₁ where
  constructor family
  field
    Index  : Set
    ruleOf : Index → Rule Σ

open RuleFamily public

-- | One-step contextual closure generated by a family of rules.
data _⇒_ (Σ : Signature) (F : RuleFamily Σ)
  : ∀ {m n}
    {xs : Vec Sort m} {ys : Vec Sort n}
    → Diagram Σ xs ys → Diagram Σ xs ys → Set where
  step : ∀ {i}
       → let r = ruleOf F i in
         _⇒_ Σ F (lhs r) (rhs r)
  seq₁ : ∀ {ℓ m n}
         {xs : Vec Sort ℓ} {ys : Vec Sort m} {zs : Vec Sort n}
         {f f' : Diagram Σ ys zs}
         {g : Diagram Σ xs ys}
       → _⇒_ Σ F f f'
       → _⇒_ Σ F (f ∘ g) (f' ∘ g)
  seq₂ : ∀ {ℓ m n}
         {xs : Vec Sort ℓ} {ys : Vec Sort m} {zs : Vec Sort n}
         {f : Diagram Σ ys zs}
         {g g' : Diagram Σ xs ys}
       → _⇒_ Σ F g g'
       → _⇒_ Σ F (f ∘ g) (f ∘ g')
  par₁ : ∀ {ℓ₁ ℓ₂ m₁ m₂}
         {xs₁ : Vec Sort ℓ₁} {xs₂ : Vec Sort ℓ₂}
         {ys₁ : Vec Sort m₁} {ys₂ : Vec Sort m₂}
         {f f' : Diagram Σ xs₁ ys₁}
         {g : Diagram Σ xs₂ ys₂}
       → _⇒_ Σ F f f'
       → _⇒_ Σ F (f ⊗ g) (f' ⊗ g)
  par₂ : ∀ {ℓ₁ ℓ₂ m₁ m₂}
         {xs₁ : Vec Sort ℓ₁} {xs₂ : Vec Sort ℓ₂}
         {ys₁ : Vec Sort m₁} {ys₂ : Vec Sort m₂}
         {f : Diagram Σ xs₁ ys₁}
         {g g' : Diagram Σ xs₂ ys₂}
       → _⇒_ Σ F g g'
       → _⇒_ Σ F (f ⊗ g) (f ⊗ g')

-- | Reflexive-transitive closure of the contextual rewriting relation.
data _⇒*_ (Σ : Signature) (F : RuleFamily Σ)
  : ∀ {m n}
    {xs : Vec Sort m} {ys : Vec Sort n}
    → Diagram Σ xs ys → Diagram Σ xs ys → Set where
  refl : ∀ {m n} {xs : Vec Sort m} {ys : Vec Sort n}
        {d : Diagram Σ xs ys}
      → _⇒*_ Σ F d d
  trans : ∀ {m n} {xs : Vec Sort m} {ys : Vec Sort n}
           {d₁ d₂ d₃ : Diagram Σ xs ys}
        → _⇒_ Σ F d₁ d₂
        → _⇒*_ Σ F d₂ d₃
        → _⇒*_ Σ F d₁ d₃
