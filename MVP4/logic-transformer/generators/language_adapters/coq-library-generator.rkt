#lang typed/racket

(require racket/list
         racket/string
         racket/file
         "../api-surface/library-api.rkt"
         "common.rkt")

(provide generate-coq-library)

(struct GenerationConfig ([moduli : (Listof Natural)]) #:transparent)

(define default-config (GenerationConfig default-moduli))

(: write-line (-> Output-Port String Void))
(define (write-line out line)
  (fprintf out "~a~n" line))

(: coq-register (-> Symbol String))
(define (coq-register sym)
  (string-append (snake->pascal sym) "Reg"))

(: coq-edge (-> Symbol String))
(define (coq-edge sym)
  (snake->pascal sym))

(: coq-list (-> (Listof String) String))
(define (coq-list items)
  (format "[~a]" (string-join items "; ")))

(: coq-src-or-dst (-> (Listof Symbol) String))
(define (coq-src-or-dst symbols)
  (coq-list (map coq-register symbols)))

(: render-m3-content (-> SampleSpec GenerationConfig String))
(define (render-m3-content sample config)
  (define ports (SampleSpec-ports sample))
  (define edges (SampleSpec-edges sample))
  (define moduli (GenerationConfig-moduli config))
  (: moduli-identifiers (Listof (Pairof String Natural)))
  (define moduli-identifiers
    (list (cons "μ₁" 0) (cons "μ₂" 1) (cons "μ₃" 2) (cons "μ₄" 3)
          (cons "μ₁★" 4) (cons "μ₂★" 5) (cons "μ₃★" 6) (cons "μ₄★" 7)
          (cons "λ" 8) (cons "λ★" 9)))
  (define moduli-lines
    (for/list : (Listof String) ([entry (in-list moduli-identifiers)])
      (let ([label (car entry)]
            [idx (cdr entry)])
        (format "(* ~a = ~a *)" label (list-ref moduli idx)))))
  (with-output-to-string
    (lambda ()
      (write-line (current-output-port) "(* Auto-generated from lt-core host bundle *)")
      (for ([line moduli-lines]) (write-line (current-output-port) line))
      (write-line (current-output-port) "")
      (write-line (current-output-port) "From Coq Require Import Arith.PeanoNat.")
      (write-line (current-output-port) "From Coq Require Import Bool.Bool.")
      (write-line (current-output-port) "From Coq Require Import Lists.List.")
      (write-line (current-output-port) "Import ListNotations.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Inductive Register : Type :=")
      (for ([reg ports])
        (write-line (current-output-port)
                    (format "  | ~a : Register" (coq-register reg))))
      (write-line (current-output-port) ".")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Inductive EdgeKind : Type :=")
      (for ([edge edges])
        (write-line (current-output-port)
                    (format "  | ~a : EdgeKind" (coq-edge (EdgeSpec-name edge)))))
      (write-line (current-output-port) ".")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Record arity := { input_arity : nat; output_arity : nat }.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Definition registers_list : list Register :=")
      (write-line (current-output-port)
                  (format "  ~a." (coq-list (map coq-register ports))))
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Definition edgeKinds_list : list EdgeKind :=")
      (write-line (current-output-port)
                  (format "  ~a." (coq-list (map coq-edge (map EdgeSpec-name edges)))))
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Definition arity_of (k : EdgeKind) : arity :=")
      (write-line (current-output-port) "  match k with")
      (for ([edge edges])
        (write-line (current-output-port)
                    (format "  | ~a => {| input_arity := ~a; output_arity := ~a |}"
                            (coq-edge (EdgeSpec-name edge))
                            (EdgeSpec-inputs edge)
                            (EdgeSpec-outputs edge))))
      (write-line (current-output-port) "  end.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Definition src_of (k : EdgeKind) : list Register :=")
      (write-line (current-output-port) "  match k with")
      (for ([edge edges])
        (write-line (current-output-port)
                    (format "  | ~a => ~a"
                            (coq-edge (EdgeSpec-name edge))
                            (coq-src-or-dst (EdgeSpec-src edge)))))
      (write-line (current-output-port) "  end.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Definition dst_of (k : EdgeKind) : list Register :=")
      (write-line (current-output-port) "  match k with")
      (for ([edge edges])
        (write-line (current-output-port)
                    (format "  | ~a => ~a"
                            (coq-edge (EdgeSpec-name edge))
                            (coq-src-or-dst (EdgeSpec-dst edge)))))
      (write-line (current-output-port) "  end.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Record type_graph := {")
      (write-line (current-output-port) "  tg_registers : list Register;")
      (write-line (current-output-port) "  tg_edgeKinds : list EdgeKind;")
      (write-line (current-output-port) "  tg_arityMap  : EdgeKind -> arity;")
      (write-line (current-output-port) "  tg_srcMap    : EdgeKind -> list Register;")
      (write-line (current-output-port) "  tg_dstMap    : EdgeKind -> list Register")
      (write-line (current-output-port) "}.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Definition sample_graph : type_graph :=")
      (write-line (current-output-port) "  {| tg_registers := registers_list;")
      (write-line (current-output-port) "     tg_edgeKinds := edgeKinds_list;")
      (write-line (current-output-port) "     tg_arityMap  := arity_of;")
      (write-line (current-output-port) "     tg_srcMap    := src_of;")
      (write-line (current-output-port) "     tg_dstMap    := dst_of |}.")
      (write-line (current-output-port) "")
      (write-line (current-output-port)
                  (format "Lemma registers_length : length (tg_registers sample_graph) = ~a." (length ports)))
      (write-line (current-output-port) "Proof. reflexivity. Qed.")
      (write-line (current-output-port) "")
      (write-line (current-output-port)
                  (format "Lemma edges_length : length (tg_edgeKinds sample_graph) = ~a." (length edges)))
      (write-line (current-output-port) "Proof. reflexivity. Qed.")
      (write-line (current-output-port) "")
      (for ([edge edges])
        (define lemma-name (format "src_length_~a" (snake->camel (EdgeSpec-name edge))))
        (write-line (current-output-port)
                    (format "Lemma ~a : length (src_of ~a) = ~a."
                            lemma-name
                            (coq-edge (EdgeSpec-name edge))
                            (length (EdgeSpec-src edge))))
        (write-line (current-output-port) "Proof. reflexivity. Qed.")
        (write-line (current-output-port) ""))
      )))

(: render-rg-content (-> SampleSpec String))
(define (render-rg-content sample)
  (define edges (SampleSpec-edges sample))
  (with-output-to-string
    (lambda ()
      (write-line (current-output-port) "Require Import M3Coq.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Definition scale_arity (scale : nat) (a : arity) : arity :=")
      (write-line (current-output-port)
                  "  {| input_arity := input_arity a; output_arity := output_arity a * scale |}.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Definition renormalise (scale : nat) (k : EdgeKind) : arity :=")
      (write-line (current-output-port) "  scale_arity scale (arity_of k).")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Lemma scale_arity_identity : forall a, scale_arity 1 a = a.")
      (write-line (current-output-port) "Proof. intros a. destruct a; simpl. reflexivity. Qed.")
      (write-line (current-output-port) "")
      (for ([edge edges])
        (define lemma-name (format "renormalise_base_~a" (snake->camel (EdgeSpec-name edge))))
        (write-line (current-output-port)
                    (format "Lemma ~a : renormalise 1 ~a = arity_of ~a."
                            lemma-name
                            (coq-edge (EdgeSpec-name edge))
                            (coq-edge (EdgeSpec-name edge))))
        (write-line (current-output-port) "Proof. reflexivity. Qed.")
        (write-line (current-output-port) ""))
      )))

(: render-tests-content (-> SampleSpec String))
(define (render-tests-content sample)
  (define edges (SampleSpec-edges sample))
  (with-output-to-string
    (lambda ()
      (write-line (current-output-port) "Require Import M3Coq RGCoq.")
      (write-line (current-output-port) "")
      (for ([edge edges])
        (define lemma-name (format "src_pattern_~a" (snake->camel (EdgeSpec-name edge))))
        (write-line (current-output-port)
                    (format "Lemma ~a : src_of ~a = ~a."
                            lemma-name
                            (coq-edge (EdgeSpec-name edge))
                            (coq-src-or-dst (EdgeSpec-src edge))))
        (write-line (current-output-port) "Proof. reflexivity. Qed.")
        (write-line (current-output-port) ""))
      (write-line (current-output-port)
                  "Lemma sigma6_renormalise_twice : renormalise 2 Sigma6 = {| input_arity := input_arity (arity_of Sigma6); output_arity := output_arity (arity_of Sigma6) * 2 |}.")
      (write-line (current-output-port) "Proof. reflexivity. Qed.")
      )))

(: render-proof-bundle (-> SampleSpec String))
(define (render-proof-bundle sample)
  (define ports (SampleSpec-ports sample))
  (define edges (SampleSpec-edges sample))
  (define sigma6-edge (find-edge-spec edges 'sigma6))
  (with-output-to-string
    (lambda ()
      (write-line (current-output-port) "Require Import M3Coq RGCoq TestsCoq.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Record MultiLogicBundle := {")
      (write-line (current-output-port) "  ml_graph : type_graph;")
      (write-line (current-output-port)
                  (format "  ml_registers : length (tg_registers ml_graph) = ~a;" (length ports)))
      (write-line (current-output-port)
                  (format "  ml_edges : length (tg_edgeKinds ml_graph) = ~a;" (length edges)))
      (write-line (current-output-port)
                  "  ml_sigma6_base : renormalise 1 Sigma6 = arity_of Sigma6;")
      (write-line (current-output-port)
                  "  ml_sigma6_double : renormalise 2 Sigma6 = {| input_arity := input_arity (arity_of Sigma6); output_arity := output_arity (arity_of Sigma6) * 2 |};")
      (write-line (current-output-port) "}.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Definition multi_logic_bundle : MultiLogicBundle :=")
      (write-line (current-output-port) "  {| ml_graph := sample_graph;")
      (write-line (current-output-port) "     ml_registers := registers_length;")
      (write-line (current-output-port) "     ml_edges := edges_length;")
      (write-line (current-output-port)
                  (format "     ml_sigma6_base := renormalise_base_~a;" (snake->camel (EdgeSpec-name sigma6-edge))))
      (write-line (current-output-port) "     ml_sigma6_double := sigma6_renormalise_twice |}.")
      )))

(: render-metalogic-bundle (-> SampleSpec String))
(define (render-metalogic-bundle sample)
  (define sigma6-edge (find-edge-spec (SampleSpec-edges sample) 'sigma6))
  (with-output-to-string
    (lambda ()
      (write-line (current-output-port) "Require Import M3Coq RGCoq.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Record MetalogicBundle := {")
      (write-line (current-output-port) "  ml_noether : renormalise 1 Sigma6 = arity_of Sigma6;")
      (write-line (current-output-port) "  ml_ward : renormalise 2 Sigma6 = {| input_arity := input_arity (arity_of Sigma6); output_arity := output_arity (arity_of Sigma6) * 2 |};")
      (write-line (current-output-port) "  ml_gamma_gamma : scale_arity 1 (arity_of Sigma6) = arity_of Sigma6;")
      (write-line (current-output-port) "  ml_renormalisable : renormalise 2 Sigma6 = scale_arity 2 (arity_of Sigma6);")
      (write-line (current-output-port) "  ml_rice : renormalise 1 Sigma6 = renormalise 1 Sigma6")
      (write-line (current-output-port) "}.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "Definition metalogic_bundle : MetalogicBundle :=")
      (write-line (current-output-port)
                  (format "  {| ml_noether := renormalise_base_~a;" (snake->camel (EdgeSpec-name sigma6-edge))))
      (write-line (current-output-port) "     ml_ward := sigma6_renormalise_twice;")
      (write-line (current-output-port) "     ml_gamma_gamma := scale_arity_identity (arity_of Sigma6);")
      (write-line (current-output-port) "     ml_renormalisable := eq_refl;")
      (write-line (current-output-port) "     ml_rice := eq_refl |}.")
      )))

(: render-main-content (-> String))
(define (render-main-content)
  (with-output-to-string
    (lambda ()
      (write-line (current-output-port) "Require Import M3Coq RGCoq TestsCoq MultiLogicBundle Metalogic.")
      (write-line (current-output-port) "")
      (write-line (current-output-port) "(* Aggregate module for convenience. *)")
      )))

(: write-module (-> String String Void))
(define (write-module path content)
  (call-with-output-file path
    (lambda ([out : Output-Port])
      (display content out))
    #:exists 'replace))

(: generate-coq-library (-> (U GenerationConfig #f) Void))
(define (generate-coq-library config)
  (define cfg (or config default-config))
  (define output-dir "../../formal/coq/Generated_Library")
  (make-directory* output-dir)
  (define sample sample-spec)
  (write-module (string-append output-dir "/M3Coq.v")
                (render-m3-content sample cfg))
  (write-module (string-append output-dir "/RGCoq.v")
                (render-rg-content sample))
  (write-module (string-append output-dir "/TestsCoq.v")
                (render-tests-content sample))
  (write-module (string-append output-dir "/MultiLogicBundle.v")
                (render-proof-bundle sample))
  (write-module (string-append output-dir "/Metalogic.v")
                (render-metalogic-bundle sample))
  (write-module (string-append output-dir "/MDEPyramidCoq.v")
                (render-main-content))
  (printf "Generated Coq library with ~a registers and ~a edges.~n"
          (length (SampleSpec-ports sample))
          (length (SampleSpec-edges sample))))

(generate-coq-library #f)
